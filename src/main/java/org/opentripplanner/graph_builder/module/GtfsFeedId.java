package org.opentripplanner.graph_builder.module;

import com.csvreader.CsvReader;
import org.onebusaway.csv_entities.CsvInputSource;

import java.io.IOException;
import java.io.InputStream;
import java.nio.charset.StandardCharsets;
import java.util.HashSet;
import java.util.Set;

/**
 * Represent a feed id in a GTFS feed.
 */
public class GtfsFeedId {
    /**
     * A counter that will increase for each created feed id.
     */
    private static int FEED_ID_COUNTER = 1;

    /**
     * A Set that keeps track of which feed ids were generated in the {@link Builder#build()} method to make sure there
     * are no duplicates.
     */
    private static final Set<String> seenIds = new HashSet<>();

    /**
     * The id for the feed
     */
    private final String id;

    /**
     * Whether the ID was autogenerated using the FEED_ID_COUNTER.
     */
    private final boolean autoGenerated;

    /**
     * Constructs a new feed id.
     *
     * If the passed id is null or an empty string a unique feed id will be generated.
     *
     * @param id The feed id
     */
    private GtfsFeedId(String id, boolean autoGenerated) {
        this.id = id;
        this.autoGenerated = autoGenerated;
    }

    public String getId() {
        return id;
    }

    public boolean isAutoGenerated() {
        return autoGenerated;
    }

    public static class Builder {

        private String id;

        public Builder id(String id) {
            this.id = id;
            return this;
        }

        /**
         * Extracts a feed_id from the passed source for a GTFS feed.
         * <p/>
         * This will try to fetch the experimental feed_id field from the feed_info.txt file.
         * <p/>
         * If the feed does not contain a feed_info.txt or a feed_id field a default GtfsFeedId will be created.
         *
         * @param source the input source
         * @return A GtfsFeedId
         * @throws IOException
         * @see <a href="http://developer.trimet.org/gtfs_ext.shtml">http://developer.trimet.org/gtfs_ext.shtml</a>
         */
        public Builder fromGtfsFeed(CsvInputSource source) {
            try {
                if (source.hasResource("feed_info.txt")) {
                    InputStream feedInfoInputStream = source.getResource("feed_info.txt");
                    try {
	                    CsvReader result = new CsvReader(feedInfoInputStream, StandardCharsets.UTF_8);
	                    result.readHeaders();
	                    result.readRecord();
	                    this.id = result.get("feed_id");
                    } finally {
                    	feedInfoInputStream.close();
                    }
                }
            } catch (IOException e) {
                throw new RuntimeException(e);
            }
            return this;
        }

        /**
         * Cleans the id before it is set. This method ensures that the id is a valid id.
         *
         * @param id The feed id
         * @return The cleaned id.
         */
        protected String cleanId(String id) {
            if (id == null || id.trim().length() == 0) {
                return id;
            }
            // 1. Underscore is used as an separator by OBA.
            // 2. Colon is used as an separator in OTP.
            return id.replaceAll("_", "%5F")
                    .replaceAll(":", "%3A");
        }

        /**
         * Creates a new GtfsFeedId.
         *
         * @return A GtfsFeedId
         */
        public GtfsFeedId build() {
            boolean autoGenerated = false;
            id = cleanId(id);
            // auto-generate a new ID if it is null or a zero-length string
            if (id == null || id.trim().length() == 0) {
                id = String.valueOf(FEED_ID_COUNTER);
                autoGenerated = true;
            }
            // add the feed ID to the set of IDs seen so far. If the set already contained the ID, throw an error in
            // order to avoid using duplicate feed IDs.
            if (!seenIds.add(id)) {
                throw new RuntimeException(
                    String.format(
                        "A duplicate Feed ID of `%s` was encountered when loading GTFS data!",
                        id
                    )
                );
            }
            FEED_ID_COUNTER++;
            return new GtfsFeedId(id, autoGenerated);
        }
    }
}
